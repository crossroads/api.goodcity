version: 2.1

# ENV VARS required
# AZURE_SP           - service principal given the Contributor role on the Azure Container Registry
# AZURE_SP_PASSWORD  - service principal password
# AZURE_SP_TENANT    - tenant of servie principal
# AZURE_SUBSCRIPTION - name of Azure subscription with the container registry
# AZURE_ACR_REGISTRY - name of Azure Container Registry
# CC_TEST_REPORTER_ID   - for reporting code climate statistics
# ROLLBAR_ACCESS_TOKEN  - for recording deployments
# GITHUB_TOKEN - token for accessing private repos. See https://github.com/settings/tokens

aliases:
  - &restore-bundler-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
  - &save-bundler-cache
      key: v1-bundle-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

orbs:
  azure-cli: circleci/azure-cli@1.2.2
  browser-tools: circleci/browser-tools@1.4.3

defaults: &defaults
  docker:
    - image: cimg/ruby:2.7.3
  working_directory: ~/api.goodcity

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/api.goodcity

  bundle_dependencies:
    <<: *defaults
    steps:
      - run: mkdir -p ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run: gem install bundler:2.2.27
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache: *restore-bundler-cache
      - run: bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - save_cache: *save-bundler-cache
      - run:
          name: Download Code Climate test reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
      - persist_to_workspace:
          root: tmp
          paths:
            - cc-test-reporter

  test:
    <<: *defaults
    docker:
      - image: cimg/ruby:2.7.3-browsers
      - image: cimg/redis:6.0
      - image: cimg/postgres:9.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: goodcity_server_test
    parallelism: 3
    environment:
      RAILS_ENV: test
      DATABASE_URL: "postgres://postgres@localhost:5432/goodcity_server_test"
    steps:
      - run: sudo apt update && sudo apt -y upgrade libu2f-udev
      - browser-tools/install-chrome:
          replace-existing: true
          chrome-version: 116.0.5845.96
      - browser-tools/install-chromedriver
      - run:
          name: Install PostgreSQL Client (required to run migrations)
          command: |
            sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
            wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
            sudo apt update
            sudo apt-get install postgresql-client-9.6
      - attach_workspace:
          at: ~/api.goodcity/tmp
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache: *restore-bundler-cache
      - run: gem install bundler:2.2.27 && bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - run:
          name: Wait for DB and Redis containers to start
          command: dockerize -wait tcp://localhost:5432 -wait tcp://localhost:6379 -timeout 1m
      - run: bundle exec rails db:create:all db:migrate
      - run:
          name: Cucumber tests
          command: |
            bundle exec cucumber
      - run:
          name: Rspec tests
          command: |
            bundle exec rspec --format progress \
                              --format RspecJunitFormatter \
                              --out ~/rspec/rspec.xml \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.$CIRCLE_NODE_INDEX.json coverage/backend/.resultset.json
      - store_test_results:
          path: ~/rspec
      - persist_to_workspace:
          root: tmp
          paths:
            - codeclimate.*.json

  upload-coverage:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/api.goodcity/tmp
      - run:
          name: Upload coverage results to Code Climate
          command: |
            ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 3 -o tmp/codeclimate.total.json
            ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json

  audit:
    <<: *defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: gem install bundler-audit
      - run: bundle-audit -v --update

  deploy:
    <<: *defaults
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache: *restore-bundler-cache
      - run: gem install bundler:2.2.27 && bundle config set --local deployment 'true' && (bundle check || bundle install --jobs=2 --retry=3)
      - run: |
          STAGE=$(if [ "$CIRCLE_BRANCH" == "live" ]; then echo production; else echo staging; fi)
          bundle exec cap ${STAGE} deploy

  build-and-deploy-docker-image:
    executor: azure-cli/default
    working_directory: ~/api.goodcity
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - azure-cli/install
      - azure-cli/login-with-service-principal
      - run: az account set --subscription $AZURE_SUBSCRIPTION
      - run: az acr build --build-arg GITHUB_TOKEN --registry $AZURE_ACR_REGISTRY --image api.goodcity:$CIRCLE_BRANCH .

workflows:
  version: 2
  build-test-audit-and-deploy:
    jobs:
      - checkout_code
      - bundle_dependencies:
          requires:
            - checkout_code
      - test:
          requires:
            - bundle_dependencies
      - audit:
          requires:
            - checkout_code
      - upload-coverage:
          requires:
            - test
      - deploy:
          requires:
            - test
            - audit
          filters:
            branches:
              only: /^(master|live)$/
      # - build-and-deploy-docker-image:
      #     requires:
      #       - test
      #       - audit
      #     filters:
      #       branches:
      #         only: /^(master)$/
